#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="orgstyle.css" />
#+TITLE: Tips and tricks
#+AUTHOR: Johanna Simonsson
* TODO
** TODO Add git section
* ABBRIVATIONS

 * *VCS*: Version Control System

* GLOSSARY

 * *Parse*: Analysera en dataström (input) för att få fram en tolkning. Exempel: Parsa xml kod till python.
 * *DHCP* (/Dynamic Host Configuration Protocol/): DHCP is used for allocation of  dynamic IP addresses to computers in a network.
 * *SSL* (/Secure Sockets Layer/): The SSL protocol is used to encrypt data for secure data transmission.
 * *Bootloader*: En bootloader är en programvara som i ett persondatorsystem av PC-typ tar över efter BIOS och laddar in operativsystemet från hårddisken till primärminnet.
 * *GRUB*: Bootloader för Linux.
 * *BIOS* (/Basic Input/Output System/): Det mest grundläggande programmet som körs i en PC-dator när den startas.
 * *U-boot* (/Universial Bootloader/): Open source, primary boot loader used in embedded devices to package the instructions to boot the device's operating system kernel.

* GENERAL

*PHP Url commands*
 * *?*: Skickar in variabler via url. Exempel: http://mywebsite.se/?variable=hej

*Difference between Centralized VCS and Distributed VCS* \\
In a /Central/ VCS, there idea is that there is only one central copy, and all developers commit only to this central copy. For a DVCS (/Distributed/ VCS), every developer have their own clone of the repository, which can be commited to the main branch. Every distribution of the repository is viewed as equal.

* SOFTWARE ARCHITECTURE

*Lots of configuration*: \\
If some part of the code requires a lot of settings to be able to configure something, consider putting all settings in a configuration file. This way it is easier to distinguish the logic of the functions and what is pure configuration.

*General questions of code structure*:\\
It is a good idea to study known modules to get a sense of what is customary when designing code. For example, if a class is designed to handle all communication over a certain session, it might be a good idea to study the 'sockets.py' in Python.

* LINUX
** General info
*General tips:*
 * Maximize/Minimize windows: ~F11~
 * Switch between workspaces: ~Ctrl + Shift + ARW~
 * It is possible to lock a window in Ubuntu so it's always possible to see it on all workspaces.

*~source~ vs ~./~* \\
~./script~ runs the script as an executable file, launching a new shell to run it. ~source script~ or ( ~. script~)  reads and executes commands from filename in the current shell environment.

** CLI commands
 * Print system information:
  #+BEGIN_SRC sh
  $ uname -a
  #+END_SRC

 * File information:
  #+BEGIN_SRC sh
  $ file <filename>
  #+END_SRC

 * If file crashes during startup:
  #+BEGIN_SRC sh
  $ strace <filename>
  #+END_SRC

 * Find something in a specific file:
  #+BEGIN_SRC sh
  $ find / -xdev -type f -print0 | xargs -0 grep -H "800x600"
  #+END_SRC

 * Overwrite file
  #+BEGIN_SRC sh
  $ echo 'hej' > file.txt
  #+END_SRC

 * Append to file
  #+BEGIN_SRC sh
  $ echo 'hej' >> file.txt
  #+END_SRC

 * Watch a command
  #+BEGIN_SRC sh
  $ watch -n1 df
  #+END_SRC

 * scp over wlan
  #+BEGIN_SRC sh
  $ scp <localfile> user@localip:/<folder>
  #+END_SRC

 * Open emacs within the terminal window
  #+BEGIN_SRC sh
  $ emacs -nw file_to_open
  #+END_SRC

** DEBUG
*apt-get stop working* \\
If apt-get stop working, e.g:

#+BEGIN_SRC sh
W: Failed to fetch http://se.archive.ubuntu.com/ubuntu/dists/utopic-updates/universe/binary-i386/Packages  404  Not Found
#+END_SRC

the linux distr. version might be too old.

** CONF

 * *Set names for IP addresses locally*: Edit /etc/hosts
 * *Grid <3*: https://github.com/ssokolow/quicktile

* C++
*Linking*
 * Linking statically(no space!): ~-Wl,-Bstatic~
 * Show linking dependencies: ~ldd <filename>~

* BASH

Set default value for environment variable if it isn't specified:
#+BEGIN_SRC sh
${ENV_VAR:=true}
#+END_SRC

Redirect standard streams:
#+BEGIN_SRC sh
>  file #redirects stdout to file
1> file #redirects stdout to file
2> file #redirects stderr to file
&> file #redirects stdout and stderr to file
#+END_SRC

Pipe error output (stderr) to nothing, i.e ignore error printouts.
#+BEGIN_SRC sh
2>/dev/null
#+END_SRC

* EMACS
** Generally
*Commands*

| Commands          | Description                           |
|-------------------+---------------------------------------|
| ~M-%~             | Search Replace (space = next)         |
| ~C-s RET C-y RET~ | Paste a specific string to search for |
| ~C-e/a~           | End/beginning of line                 |
| ~C-x o~           | Change buffer                         |
| ~C-l~             | Centrera skärmen runt                 |
| ~C-<~             | Beginning of doc                      |
| ~C->~             | End of doc                            |
| ~C-SPC~           | Starta markering                      |
| ~M-a/e~           | Hoppa stycken                         |
| ~C-x C-v~         | revert buffer, hämtar filen igen      |
| ~C-x C-+/-~       | Ändrar sizen på fonten                |
| ~C-x 0~           | delete current window                 |


*Extended commands*
| Commands                 | Descriptions                 |
|--------------------------+------------------------------|
| ~M-x whitespace-cleanup~ | Clean whitespace after lines |
| ~M-x shell RET~          | Shell in buffer              |
| ~C-u M-x shell~          | Öppnar ett andra shell       |


*Ta bort intabbning/spaces* \\
/Region/
  1. Mark region
  2. ~C-x TAB~
  3. Move with ARW(l/r) or SHIFT + ARW(l/r)

/Repeated/
  1. Mark region
  2. ~C-u +/- NOF_TIMES~ (add/remove spaces)
  3. ~C-x TAB~

*neotree* \\
Gives a tree structure in Emacs.
| Command       | Description         |
|---------------+---------------------|
| ~M-x neotree~ | Open neotree        |
| ~C-c C-c~     | Change root         |
| ~TAB~         | Open/close dirs     |
| ~H~           | Toggle hidden files |
| ~A~           | Expands window      |

** Org-Mode

*Emphasis and monospace*
#+BEGIN_EXAMPLE
  * *FETSTILT*
  * /KURSIVT/
  * _UNDERSCORE_
  * =verbatism=
  * ~code~
#+END_EXAMPLE

*Enter easy templates* \\

 * Goto an empty line and insert: ~<s + TAB~

 * This will insert:
  #+BEGIN_EXAMPLE
    #+BEGIN_SRC identifier

    #+END_SRC
  #+END_EXAMPLE

Some of the supported languages are:

#+CAPTION: Supported languages in source mode
#+ATTR_HTML: :border 2
| Language   | Identifier   |
|------------+--------------|
| C          | ~C~          |
| C++        | ~cpp~        |
| CSS        | ~css~        |
| Emacs Lisp | ~emacs-lisp~ |
| Java       | ~java~       |
| LaTeX      | ~latex~      |
| Make       | ~makefile~   |
| Org        | ~org~        |
| Python     | ~python~     |
| Shell      | ~sh~         |

*** LATEX

Install in linux:
#+BEGIN_SRC sh
$ sudo apt-get install texlive
#+END_SRC

*Spell check* \\
#+BEGIN_SRC emacps-lisp
M-x flyspell-buffer
#+END_SRC

*List of tables*
#+BEGIN_EXAMPLE
#+TOC: tables
#+END_EXAMPLE

*Glossary without numbering*
#+BEGIN_SRC latex
\section*{Glossary}
#+END_SRC

*Set line wrap* \\
För att se till att en rad automatiskt fortsätter på nästa rad kan man göra två saker:

#+BEGIN_SRC emacs-lisp
M-x visual-line-mode
#+END_SRC

För att sätta margin på buffern sätt ~fill-column~

#+BEGIN_SRC emacs-lisp
 C-x f RET 120
#+END_SRC

För att aktivera ~window-margin-mode~ skriv:

#+BEGIN_SRC emacs-lisp
M-x window-margin-mode
#+END_SRC

*References* \\
För att referera/länka till vad som helst.

#+BEGIN_EXAMPLE
[[ reference ]]
#+END_EXAMPLE

Detta kan inkludera:
 * Headings (hela namnet)
 * Figures (path-to-figure)
 * Tables etc. (label-name)
 * etc.

*Lås placement för figure*
#+BEGIN_EXAMPLE
#+ATTR_LaTeX: placement=[H]
#+END_EXAMPLE

*Referera inom dokumentet* \\ 
Sätt namn/label på det som ska refereras
#+BEGIN_EXAMPLE
#+LABEL: tab:test
#+END_EXAMPLE

*How to add footnotes*
#+BEGIN_SRC
C-c C-x f
#+END_SRC

*Ny sida*
#+BEGIN_SRC latex
\newpage
#+END_SRC

*Ingen intabbning vid ny rad*
#+BEGIN_SRC latex
\noindent
#+END_SRC

* DOCKER
  
*Free up space*
 * Remove images
  #+BEGIN_SRC sh
  docker images
  docker rmi ID
  #+END_SRC

 * Stop processes
  #+BEGIN_SRC sh
  docker ps -a
  docker stop ID
  docker rm -v ID  #-v flag is important!
  #+END_SRC

* PYTHON

*Python shell* \\
*Continue line:*
#+BEGIN_SRC python
print("hej" \
      "då")
#+END_SRC


*General functions*

Gives the dir separator in the current OS.
#+BEGIN_SRC python
os.sep
#+END_SRC

Find string between 'def and '('
#+BEGIN_SRC python
re.search('def(.*)\(', string).group(1)
#+END_SRC

* PYTEST

*hook* \\
En hook är där man som användare kan interagera/ändra någonting som redan
pågår i ett program/system.

  1. *Create Something*
  2. /Hook implemented --> modify created/
  3. *Continue*

*@pytest.fixture(scope="function")* \\
~def ctrl(request, ctrl):~ \\
 * Scope för fixturer berättar hur länge en fixture ska 'hålla'.
 * Request-input till en fixture gör at man kan lägga till en finalizer (teardown)

*@pytest.mark.timeout(60)* \\
Sätt time-out på långtidstester annars så dödas de av default-time-outen (satt till 0.5-1h)

* VIRTUALBOX

*Shrink VDMK size* \\
If one is using a dynamically expanding image for their hard drive, where you set the maximum size of the disk,
the system will only grow to fill that space if required. Unfortunately, whilst VirtualBox will dynamically
expand the hard drive as it’s required, it won’t dynamically shrink it again if you free up space in the VM.
To shrink the VM:

1. Free up as much space as possible on the guest system.

2. Install zerofree on the *Guest* system:
  #+BEGIN_SRC sh
  $ sudo apt-get install zerofree
  #+END_SRC

3. Start the *VM* (Virtual Machine) in *recovery mode* (from GRUB)

4. Find out where / is mounted by studying the output of: (usually /dev/sda1)
  #+BEGIN_SRC sh
     $ mount
  #+END_SRC

5. If the boot device is mounted as rw, change it to read-only by entering:
  #+BEGIN_SRC sh
     $ mount -n -o remount,ro -t ext2 /dev/sda1 /
  #+END_SRC

6. To zero out the free space so the compact tool can work, enter:
  #+BEGIN_SRC sh
     $ zerofree /dev/sda1
  #+END_SRC

7. *Shutdown* the VM.

8. Open a command prompt on the *Host* Machine (Windows) and navigate to the vmdk-file.

9. Clone the vmdk-file to vdi format to be able to compact it:
  #+BEGIN_SRC sh
     $ vboxmanage clonehd mydisk.vmdk cloneddisk.vdi --format VDI
  #+END_SRC

10. To shrink the disk, run:
  #+BEGIN_SRC sh
      $ vboxmanage modifyhd --compact cloneddisk.vdi
  #+END_SRC

11. Clone the disk again to the right format:
  #+BEGIN_SRC sh
      $ vboxmanage clonehd cloneddist.vdi newdisk.vmdk --format VMDK
  #+END_SRC
* test
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
