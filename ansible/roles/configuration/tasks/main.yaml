- name: "Register base directory path"
  set_fact:
    base_dir: "{{ lookup('pipe', 'git rev-parse --show-toplevel') }}"

- name: "Get golang"
  get_url:
    url: https://storage.googleapis.com/golang/go{{ golang_version }}.linux-amd64.tar.gz
    dest: /tmp/go{{ golang_version }}.linux-amd64.tar.gz

- name: "Install golang"
  unarchive:
    src: /tmp/go{{ golang_version }}.linux-amd64.tar.gz
    dest: ~/
  args:
    creates: ~/go

- name: "Clone fzf"
  git:
    depth: 1
    repo: https://github.com/junegunn/fzf.git
    dest: ~/.fzf

- name: "Clone zsh-autosuggestions"
  git:
    depth: 1
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: ~/joh-conf/conf/zsh_custom/plugins/zsh-autosuggestions

- name: "Clone zsh-syntax-highlighting"
  git:
    depth: 1
    repo: https://github.com/zsh-users/zsh-syntax-highlighting
    dest: ~/joh-conf/conf/zsh_custom/plugins/zsh-syntax-highlighting

- name: "global pip install"
  become: yes
  become_user: root
  shell: pip3 install {{ item }}
  with_items:
  - "ipython"
  - "autopep8"

- name: "Get pycharm info"
  shell: snap info pycharm-professional
  register: pycharm_info
  ignore_errors: yes

- name: "Get pycharm version"
  shell: echo "{{ pycharm_info.stdout }}" | grep installed | grep -oE '[0-9]{4}.[0-9]{1}'
  register: pycharm_version
  ignore_errors: yes

- name: "Create PyCharm directory"
  file:
    path: ~/.config/JetBrains/PyCharm{{ pycharm_version.stdout }}
    state: directory

- name: "Clone spacemacs"
  git:
    repo: https://github.com/syl20bnr/spacemacs.git
    dest: ~/.emacs.d

- name: "Clone oh-my-zsh"
  git:
    depth: 1
    repo: https://github.com/robbyrussell/oh-my-zsh.git
    dest: ~/.oh-my-zsh

- name: "Install zplug"
  shell: export ZPLUG_HOME=$HOME/.zplug && git clone https://github.com/zplug/zplug $ZPLUG_HOME
  args:
    creates: ~/.zplug

- name: "Install fzf"
  shell: yes 'y' | ~/.fzf/install
  args:
    creates: ~/.fzf.zsh

- name: "Check existence of hostname"
  stat: path=~/hostname
  register: hostname_available

- name: "Prompt for hostname"
  pause:
    prompt: "Enter host name (e.g. 'home')"
  when: not hostname_available.stat.exists
  register: hostname

- name: "Put hostname into file if missing"
  copy: content="{{ hostname.user_input }}" dest=~/hostname
  when: hostname.user_input is defined and not hostname_available.stat.exists

- name: "Ensures path exists"
  file: path={{ item }} state=directory recurse=yes
  with_items:
    - ~/.config/terminator/
    - ~/.config/parcellite/
    - ~/.config/autostart/

- name: "Check existence of .zshrc"
  stat: path=~/.zshrc
  register: zshrc_available

- name: "Remove zshrc if file and not symlink"
  file: path=~/.zshrc state=absent
  when: zshrc_available.stat.exists and not zshrc_available.stat.islnk

- name: "Create PyCharm directory"
  file:
    path: ~/.config/JetBrains/PyCharm{{ pycharm_version.stdout }}
    state: directory

- name: "Check existence of idea.properties"
  stat: path=~/.config/JetBrains/PyCharm{{ pycharm_version.stdout }}/idea.properties
  register: idea_available

- name: "Remove idea.properties if file and not symlink"
  file: path=~/.config/JetBrains/PyCharm{{ pycharm_version.stdout }}/idea.properties state=absent
  when: idea_available.stat.exists and not idea_available.stat.islnk

- name: "Symlink configuration files"
  file:
    src: "{{ base_dir }}/conf/{{ item.src }}"
    dest: "~/{{ item.dest }}"
    state: link
  with_items:
  - { src: 'terminator/config', dest: '.config/terminator/config' }
  - { src: '.zshrc', dest: '.zshrc' }
  - { src: '.spacemacs', dest: '.spacemacs' }
  - { src: '.gitignore_global', dest: '.gitignore_global' }
  - { src: 'parcellite/parcelliterc', dest: '.config/parcellite/parcelliterc' }
  - { src: 'autostart', dest: '.config/autostart/parcellite.desktop' }
  - { src: 'idea.properties', dest: '.config/JetBrains/PyCharm{{ pycharm_version.stdout }}/idea.properties' }
  - { src: '.taskrc', dest: '.taskrc' }

# - name: "Set default shell to zsh"
#   shell: chsh $USER -s $(which zsh)
#   become: yes

- name: "Check existence of hostname"
  stat: path={{ base_dir }}/ansible/roles/configuration/vars/local/email.yaml
  register: email_available

- name: "Prompt for email"
  pause:
    prompt: "Enter email"
  when: not email_available.stat.exists
  register: email

- name: "Put email into file if missing"
  copy:
    content: "user_email: {{ email.user_input }}"
    dest: "{{ base_dir }}/ansible/roles/configuration/vars/local/email.yaml"
  when: email.user_input is defined and not email_available.stat.exists

- name: "Include email as variable"
  include_vars:
    file: local/email.yaml

- name: "Check existence of signingkey"
  stat: path={{ base_dir }}/ansible/roles/configuration/vars/local/signingkey.yaml
  register: signingkey_available

- name: "Prompt for signingkey"
  pause:
    prompt: "Enter GPG signingkey"
  when: not signingkey_available.stat.exists
  register: signingkey

- name: "Put signingkey into file if missing"
  copy:
    content: "signingkey: {{ email.user_input }}"
    dest: "{{ base_dir }}/ansible/roles/configuration/vars/local/signingkey.yaml"
  when: signingkey.user_input is defined and not signingkey_available.stat.exists

- name: "Include email as variable"
  include_vars:
    file: local/signingkey.yaml

- name: "Copy global git config"
  template:
    src: gitconfig.j2
    dest: ~/.gitconfig

- name: "Check default terminal"
  shell: gsettings get org.gnome.desktop.default-applications.terminal exec
  register: terminal
  changed_when: False

- name: "Set terminator as default terminal"
  shell: gsettings set org.gnome.desktop.default-applications.terminal exec 'terminator'
  when: terminal.stdout != "'terminator'"
  become: yes
  become_user: root

- name: "Generate ipython config"
  shell: ipython profile create
  args:
    creates: ~/.ipython

- name: "Copy ipython config"
  copy:
    src: "{{ base_dir }}/conf/ipython/profile_default/ipython_config.py"
    dest: "~/.ipython/profile_default/ipython_config.py"

- name: "Install latest pyenv version"
  shell: pyenv install 3.11:latest
  ignore_errors: yes

- name: "Create default pyenv virtualenv"
  shell: pyenv virtualenv $(pyenv versions --bare) default
  ignore_errors: yes
